1,求两个数的大小：

#导入随机数函数包
import random
#定义了一个函数：
def compareNum(num1, num2):
    if(num1>num2):
        return 1
    elif(num1 == num2):
        return 0
    else:
        return -1
#随机数对两个变量赋值,随机范围[1,9),步进为2，意思是范围中只能是1，3，5，7
num1 = random.randrange(1,9,2)
num2 = random.randrange(1,9,2)
print("num1 = ",num1)
print("num2 = ",num2)
#调用定义的函数compareNum():
print(compareNum(num1,num2))

2，创建一个对象:

例子1：
class Student:
    __name = ""
    def __init__(self,name):
        self.__name = name
    def getName(self):
        return self.__name

#类和函数入口之间用一空行隔开，表示新的代码的开始
if __name__ == "__main__":
    student = Student("Tom")
    print(student.getName())

例子2：
class A:
    def funX(self):
        print("funX()")
    def funY(self):
        print("funY()")
        

if __name__ == "__main__":
    a = A()
    a.funX()
    a.funY()

3，关于注释

单行注释：用一个 #
多行注释：python 会忽略"#"后的内容
所以可以每行开头都用#来注释，段落之间可以用一个#行隔开
关于中文注释：
在python文件的最前面加上(此注释仅针对python2,因为python3中默认的编码是Unicode)
# -*- ： UTF-8 -*-
跨平台注释：
*nix系统中
#!/usr/bin/python

4，语句的分隔
分号：;表示语句的结束，但是python不推荐这样的方式，因为python更倾向于使用换行为语句进行分隔
对于一条语句，需要占用多行的情况，可以用"\"来实现

5，python 的变量和常量
python 变量的赋值：
    每一次赋值都将创建一个新的变量
例如：
x = 1
print(id(x))
x = 2
print(id(x))

1724539040
1724539072

变量都必须赋值，否则直接输出没有赋值的变量将报一个错误提示：
例如print (y)
NameError: name 'y' is not defined

6,序列方式的多变量赋值：

a = (1,2,3)
(x,y,z) = a
print(x)
print(y)
print(z)

1
2
3

7,局部变量

def funX():
    local = 1
    print(local)
funX()
print(local)

8，全局变量：

_a = 1
_b = 2
def add():
    global _a
    _a = 3
    return "_a + _b = ",_a + _b
def sub():
    global _b
    _b = 4
    return "_a - _b = ",_a - _b
print(add())
print(sub())

('_a + _b = ', 5)
('_a - _b = ', -1)

_a = 1
_b = 2
def add():
    _a = 3
    return "_a + _b = ",_a + _b
def sub():
    _b = 4
    return "_a - _b = ",_a - _b
print(add())
print(sub())

('_a + _b = ', 5)
('_a - _b = ', -3)

备注：注意一下不带global 与带global 的区别

9,常量

10，数据类型
，自动类型管理
python中有int ,float,bool,complex(复数），str long(?,没有测试出来，好像没有long类型)

str：有' ,",''',都可以表示字符串

''',可以写doc 文档

class Hello:
    '''hello world'''
    def printHello():
        '''print hello world'''
        print ("hello world!")
print (Hello.__doc__)
print (Hello.printHello.__doc__)

hello world
print hello world

转义字符：  \

str = 'he say:\'hello world!\''

print (str)

he say:'hello world!'

使用双引号或三引号可以直接输出含有特殊字符的字符串，不需要使用转义字符。

str = "he say:'hello world!'"
print (str)
str = '''he say:'hello world!' '''#注意：三引号前面有一个空格，为了是让python识别出三引号
print (str)

he say:'hello world!'
he say:'hello world!' 

12，运算符与表达式

运算符：+，-，* ，/,%,**;(加，减，乘，除，模（求余），幂）
	不支持自增、自减

13，逻辑运算
与，或，非 and,or,not

这里是一个用基础逻辑运算，编写的一个异或运算：

def xor(b1,b2):
    return not b1 and b2 or b1 and not b2

print(xor(True,True))
False

print(xor(False,True))
True

print(xor(False,False))
False

print(xor(True,False))
True

14，条件判断语句

if(a<b):
    print("a小于b")
else:
    print("a不小于b")

附：控制台输入方法：input([提示语])，例如：x = input("x:")

x = input("x:")

x:2             #2就是键盘输出的字符

print(x)

2		#2这里是字符类型，需要用int(x)转换为int型，如果不转型，不能正确的进行计算

标准的书写方式：
附：为了防止编写代码的时候，在按下enter键执行代码，请使用ctrl+enter,开始下一行的代码编辑

a = input("a:")
a = int(a)
b = input("b:")
b = int(b)
print(a+b)


15，if ...elif... else   相当与java中的if elseif else
switch 功能语句的实现

使用字典的方式：
先导入包
1，先定义一个字典，由键值对组成的数组，
2，调用字典的get(key) 方法

x = 1
y = 2
operator = "/"
result = {
    "+" : x + y,
    "-" : x + y,
    "*" : x * y,
    "/" : x / y
}
print(result.get(operator))

0.5

16,循环语句

    1，while 循环：

while():
    ...
else:
    ...

例如：
numbers = input("输入几个数字，用逗号分隔：").split(",")
print(numbers)
x = 0
while x < len(numbers):
    print(numbers[x])
    x += 1
    

输入几个数字，用逗号分隔4,2,3,7
['4', '2', '3', '7']
4
2
3
7

    2，for 循环：
for ... in ...(range(-1,2))    #range(x)返回的是一个列表：

class range(object)
   range(stop) -> range object
range(start,stop[,step]) -> range object

# for in 语句
for x in range(-1,2):
    if x > 0:
        print("正数",x)
    elif x==0:
        print("零",x)
    else:
        print ("负数",x)
else:
    print("循环结束")
    
负数 -1
零 0
正数 1
循环结束

  break 和 continue 语句：
与java 中的用法一样，break 跳出整个循环体，continue 只是从本次循环中跳过，直接进入下一次循环


arr1 = input().split(",")
print(arr1)
x = 0
j = 0
z = 0

冒泡排序：

def bubbleSort(numbers):
    for x in range(len(numbers)-1,-1,-1):
        for j in range(x):
            if numbers[j] > numbers[j+1]:
                numbers[j],numbers[j+1] = numbers[j+1],numbers[j]
    print(numbers)

def main():
    numbers = [12,32,1,23,15,1]
    bubbleSort(numbers)

if __name__ == '__main__':
    main()
    
[1, 1, 12, 15, 23, 32]

17，数据结构：元组，列表，字典  ;元组，列表和字符串都属于序列！（都有索引）

元组：tuple
定义：tuple = ("apple","banana","orange") 
      tuple = ("apple",)                 #唯一元素的元组，元素后必须跟一个逗号，与表达式区分

				idea开发工具小提示：
					跳出双引号：shift + "
					跳出单引号：'
					跳出括号：shift + )
					跳出中括号：]
					以此类推。
访问方式：用索引号访问

特性：支持负数索引，和分片(slice)，一旦创建，不可更改

负数索引：从元组的末端元素开始，索引为-1,次末端元素索引为-2,...
分片：指元组的子集，用两个索引值规定，两个索引值中间用冒号分隔：tuple[m:n]

元组的打包与解包
tuple3 = ("aaa","bbb","ccc")

a,b,c = tuple3

print(a,b,c)

aaa bbb ccc

元组的遍历方式：
1，通过 range() 和 len() 函数遍历
2，通过 for x in tuple 直接遍历


列表：与元组相似，都是由一组元素组成，

特性：可以增，删， 改， 查操作，同时也支持负数索引，分片，多元，
与java 中的List 相似
创建： list = [元素1，元素2，...]
增： append(object)

删： remove(value）移除为value 的元素，特别地，如果list 中有相同的元素，则移除靠前的元素
     remove(list[0]) 移除下标为0 的元素
     pop() #移除最后一个元素

查： index("value") 或 in 关系判断
index("value") 将返回value对应的下标
"value" in list 将判断"value"是否存在，返回True或false

列表的连接：
通过函数extend() 例如：list1.extend(list2)
运算符：“+”，“+=”
list1 = list1+list2, 或 list1+=list2

列表的排序：
sort():按首字母升序排列
reverse():反转，对原顺序反向排序

附：列表是list 类的实现，所以可以使用 help(list)来获取关于list 类的所有信息

list类的常用方法：
append(object):在末尾添加元素object
insert(index,object):在指定索引index的位置插入对象object
remove(value):移除列表中首次出现的值value
pop([index]):删除指定索引index处的值，如果不带索引，则删除列表最后的元素
extend(iterable):用来连接其他列表iterbale
index(value,[start,[stop]]):返回value出现在列表中的索引值，如果没有则抛出异常
sort(cmp=None,key=None,reverse=False):排序
reverse():列表反转

通过list的方法实现堆栈，队列：
堆栈：通过append()和pop()实现，添加的元素在末尾，删除时也是删除最后的一个元素;(后进先出)
队列：通过append()和pop(0)实现，元素添加在末尾，删除时删除列表第一个元素;（先进先出）

感想：堆栈和队列的特性使普通的数据有了结构性，从而也让数据本身有了意义！！！！

字典结构：由“键-值对”组成的集合，与java 中的map数据类型相似

字典的创建：
  dictionary = {}
  dictionary = {key1:value1,key2:value2,...}

简单地创建和访问：
dict = {"a":"aaa","b":"bbb","c":"ccc"}
print(dict)
print(dict["a"])

{'a': 'aaa', 'b': 'bbb', 'c': 'ccc'}
aaa

创建字典时，也可以用纯数字代替key键：
dict = {1:"value1",2:"value2"}
print(dict[1])

print()格式化输出在dict 中的应用：
print("%s,%(a)s,%(b)s" %{"a":"apple","b":"banana"})

{'a': 'apple', 'b': 'banana'},apple,banana

字典的增，删，改 ，查：
增，改：dict["key"] = "value":如果在dict中找不到key,则新增一个键值对，如果存在key,则修改value值
删：del(dect["key"])
    dict.pop("key")  :如果存在key键，则移除该键值对，并返回该键对应的值
    dict.clear()     :移除所有的键值对，dict将变为一个空字典

字典的遍历：
for ... in ...

dict = {"a":"aaa","b":"bbb","c":"ccc"}
for k in dict:
    print ("dict[%s]=" % k,dict[k])

dict[a]= aaa
dict[b]= bbb
dict[c]= ccc

dict.items()

dict = {"a":"aaa","b":"bbb","c":"ccc"}
print(dict.items())

for (k,v) in dict.items():
   print("dict[%s] =" % k, v)

dict_items([('a', 'aaa'), ('b', 'bbb'), ('c', 'ccc')])

dict[a] = aaa
dict[b] = bbb
dict[c] = ccc

字典的方法：
keys():
values():

dict = {"a":"aaa","b":"bbb","c":"ccc"}
print(dict.keys())
dict_keys(['a', 'b', 'c'])

print(dict.values())
dict_values(['aaa', 'bbb', 'ccc'])

dict.get(k[,d]):获取dict字典中键为k 的值，如果k不存在，则返回d,如果不写d,返回None

dict1.update(dict2):合并dict1与dict2;如果dict2中有键值与dict1中的键值相同，则把dict2中键对应的值覆盖		    dict1中键对应的值;更新后的dict1是无序的
dict.setdefault(k[,b]): 如果k存在，则返回get(k[,b])的值，如果不存在，则创建新的键值对k-None或k-b,返回			get(k[,b])的值

dict = {}
dict.setdefault("a")

print(dict)
{'a': None}

dict["a"] = "aaa"

print(dict)
{'a': 'aaa'}

dict.setdefault("a","None")
Out[50]: 'aaa'

print(dict)
{'a': 'aaa'}

dict.copy():对dict内容进行拷贝

print(dict)
{'a': 'aaa', 'b': 'bbb', 'c': 'ccc'}

print(dict.copy())
{'a': 'aaa', 'b': 'bbb', 'c': 'ccc'}

print(id(dict))
121573736

print(id(dict.copy()))
121427072

print(id(dict.copy()))
121480032

print(type(dict))
<class 'dict'>

print(type(dict.copy()))
<class 'dict'>

排序：
内置函数：
sorted(dict.items(),key=lambda d: d[0])  #按照key排序
sorted(dict.items(),key=lambda d: d[1])  #按照value排序 

                                         lambda是匿名函数，“:”前的是函数参数，后是返回值表达式


18,序列：元组，列表，字符串都是序列
序列的访问：
list = ['a','b','c','d','e']
print(list[0])#单索引访问：a
print(list[1:-1])#分片访问，访问[1,-1):b,c,d
print(list[:])#所有元素
print(list[:3])#从第一个到第三个：a, b, c
print(list[3:])#从第四个到最后一个：d,e

元组与列表的区别：


	支持负索引	支持分片	支持添、删、改		支持排序、查找		数据含义	
元组：	     √		   √ 		      ×                      × 	    不同含义的数据组成
列表：	     √		   √                 √		      √            相同含义的数据组成





activate // 切换到base环境


activate learn // 切换到learn环境


conda create -n learn python=3 // 创建一个名为learn的环境并指定python版本为3(的最新版本)


conda env list // 列出conda管理的所有环境


conda list // 列出当前环境的所有包


conda install requests 安装requests包


conda remove requests 卸载requets包


conda remove -n learn --all // 删除learn环境及下属所有包


conda update requests 更新requests包


conda env export > environment.yaml // 导出当前环境的包信息


conda env create -f environment.yaml // 用配置文件创建新的虚拟环境



打包为exe:
pyinstaller -F E:\Anaconda3\envs\learn\code\test.py --noconsole

-F:把所有文件打包成一个exe文件
--noconsole 运行exe不显示console控制台
打包好的文件保存在了 C:\Users\Chenwujie\dist目录下














