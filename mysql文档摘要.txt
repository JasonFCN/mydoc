-- 锁
共享锁：select
独占锁: update,delete
意向共享锁：SELECT ... LOCK IN SHARE MODE sets an IS lock
意向独占锁：SELECT ... FOR UPDATE sets an IX lock.
表级锁类型兼容性:
	X			IX			S			IS
X	Conflict	Conflict	Conflict	Conflict
IX	Conflict	Compatible	Conflict	Compatible
S	Conflict	Conflict	Compatible	Compatible
IS	Conflict	Compatible	Compatible	Compatible
记录锁：在索引记录上的锁。SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE
间隙锁：是对索引记录之间的间隙的锁，或者是对第一个索引记录之前或最后一个索引记录之后的间隙的锁。设置READ COMMITTED隔离级别，可以禁用间隙锁。
Next-Key 锁：是索引记录上的记录锁和索引记录之前的间隙上的间隙锁的组合。默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行。在这种情况下，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻像行。
插入意图锁：插入意图锁是一种由INSERT行插入之前的操作设置的间隙锁 。
AUTO-INC 锁：
空间索引的谓词锁：
-----------------------------
--事务
事务隔离级别：
REPEATABLE READ：
InnoDB默认的隔离级别。
	1）普通select读操作彼此是一致的。
	2）锁定读取（select ... for update,select ... lock in share mode）、update、delete语句，锁定取决于语句是使用具有唯一搜索条件的唯一索引还是范围类型搜索条件。
		- 对于具有唯一搜索条件的唯一索引，只锁定找到的索引记录，而不锁定它之前的间隙。
		- 对于其他条件，锁定扫描的索引范围，使用间隙锁或next-key锁防止其他会话插入范围所覆盖的间隙。
READ COMMITTED：
	1）每个一致的读取，即使在同一个事务中，也会设置和读取自己的新快照。
	2）锁定读取（select ... for update,select ... lock in share mode）、update、delete语句，只锁定索引记录。间隙锁定仅用于外键约束检查和重复键检查。由于间隙锁定被禁用，可能会出现幻像行问题。
	3）额外效果：
		- 对于update，delete语句，只会锁定它更新或删除的行，在MySQL评估where条件后释放不匹配行的记录锁。大大降低死锁的可能性.
		- 对于update, 如果行已被锁定，InnoDB 执行一个“半一致”读，返回最新提交的版本到MySQL，以便MySQL能够确定该行是否比赛 WHERE的条件 UPDATE。如果行匹配（必须更新），MySQL 再次读取该行，这次InnoDB要么锁定它，要么等待锁定它。

READ UNCOMMITTED：
	非锁定读，也就意味着会出现脏读。
SERIALIZABLE：
--------------------------------
例子：
两个会话分别运行一个update语句：
	READ COMMITTED:
		第一个会话update,在它读取的每一行都获取一个X锁,然后决定是否修改它，如果不修改，则释放锁。否则持有锁直到事务结束。
		第二个会话update,判断是否需要更新，如果是，再次读取该行，要么锁定（where条件不相同的索引），要么等待锁定（where条件使用相同的索引）。
	REPEATABLE READ:
		第一个会话update,在它读取的每一行都获取一个X锁,并且不释放任何行。
		第二个会话update,在尝试获取任何锁时，都会阻塞，并且在第一次update提交或回滚之前都不会继续。
---------------------------------		
多版本控制（MVCC）：
	一致非锁定读取：在一个时间点使用多版本查询数据库的快照。查询只会看到该时间点之前提交的事务所做的更改，而不会看到之后或未提交的的事务的更改。但是查询可看到同一事务中较早的语句所做的更改。
	在REPEATABLE READ模式下，只会读取该事务第一个此类读取建立的快照；在READ COMMITTED模式下，事务中的每个一致性读取会设置并读取自己的新快照。
	一致性读是在REPEATABLE READ和READ COMMITTED模式下默认的读取方式。
----------------------------------
不同SQL语句设置的锁：
1）SELECT ... FROM是一致读，读取数据库的快照并且不设置锁。除非事务隔离级别设置为 SERIALIZABLE。对于 SERIALIZABLE级别，搜索在它遇到的索引记录上设置共享的 next-key 锁。但是，对于使用唯一索引锁定行以搜索唯一行的语句，只需要索引记录锁。
2）对于SELECT ... FOR UPDATE 或者 SELECT ... LOCK IN SHARE MODE，为扫描的行获取锁，并期望为不符合包含在结果集中的行（例如，如果它们不满足WHERE子句中给出的条件）释放锁。但是在在一个 UNION语句中,锁可能不能立即释放。
3）SELECT ... LOCK IN SHARE MODE在搜索遇到的所有索引记录上设置共享的 next-key 锁。但是，对于使用唯一索引锁定行以搜索唯一行的语句，只需要索引记录锁。
4）SELECT ... FOR UPDATE在搜索遇到的每条记录上设置一个独占的 next-key 锁。但是，对于使用唯一索引锁定行以搜索唯一行的语句，只需要索引记录锁。
	对于搜索遇到的索引记录， 在某些事务隔离级别SELECT ... FOR UPDATE阻止其他会话执行 SELECT ... LOCK IN SHARE MODE或读取。一致读取忽略对读取视图中存在的记录设置的任何锁定。
5）UPDATE ... WHERE ...在搜索遇到的每条记录上设置一个独占的 next-key 锁。但是，对于使用唯一索引锁定行以搜索唯一行的语句，只需要索引记录锁。
6）
7）DELETE FROM ... WHERE ...在搜索遇到的每条记录上设置一个独占的 next-key 锁。但是，对于使用唯一索引锁定行以搜索唯一行的语句，只需要索引记录锁。
8）INSERT在插入的行上设置排他锁。这个锁是索引记录锁，不是next-key锁（即没有间隙锁），并且不会阻止其他会话在插入行之前插入间隙。
9）INSERT INTO T SELECT ... FROM S WHERE ... sets an exclusive index record lock (without a gap lock) on each row inserted into T. If the transaction isolation level is READ COMMITTED, or innodb_locks_unsafe_for_binlog is enabled and the transaction isolation level is not SERIALIZABLE, InnoDB does the search on S as a consistent read (no locks). Otherwise, InnoDB sets shared next-key locks on rows from S. InnoDB has to set locks in the latter case: During roll-forward recovery using a statement-based binary log, every SQL statement must be executed in exactly the same way it was done originally.
